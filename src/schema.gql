# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface UserProperty {
  id: Int!
  string: String!
  property: Property!
}

interface FlagProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface UserContactProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface UserGroupProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface LangProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface ValueProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface SectionProperty implements ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface BlockProperty implements ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

interface ElementProperty implements ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

type PropertyProperty {
  id: String!
  value: String!
  property: Property!
}

type Property {
  id: String!
  created_at: String!
  updated_at: String!
  version: Int!
  property: [PropertyProperty!]
}

type FlagFlag {
  id: Float!
  flag: Flag!
}

type Flag {
  id: String!
  created_at: String!
  updated_at: String!
  version: Int!
  label: String
  propertyList: [FlagProperty!]!
  propertyItem(id: String!): FlagProperty
  propertyString(id: String!): String
  flagList: [FlagFlag!]!
  flagString: [String!]!
}

type UserContact implements WithFlagSchema {
  flagList: [Flag!]!
  flagString: [String!]!
  id: String!
  type: UserContactType!
  created_at: String!
  updated_at: String!
  version: Int!
  propertyList: [UserContactProperty!]!
  propertyItem(id: String!): UserContactProperty
  propertyString(id: String!): String
}

interface WithFlagSchema {
  flagList: [Flag!]!
  flagString: [String!]!
}

enum UserContactType {
  EMAIL
  PHONE
  GOOGLE
  APPLE
}

type UserUserContact {
  id: Int!
  value: String!
  contact: UserContact!
}

type UserGroup implements WithFlagSchema {
  flagList: [Flag!]!
  flagString: [String!]!
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  parent: UserGroup
  children: [UserGroup!]!
  propertyList: [UserGroupProperty!]!
  propertyItem(id: String!): UserGroupProperty
  propertyString(id: String!, lang: String): String
}

type User implements WithFlagSchema {
  flagList: [Flag!]!
  flagString: [String!]!
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  login: String!
  hash: String
  contact: [UserUserContact!]!
  group: [UserGroup!]
  propertyList: [UserProperty!]!
  propertyItem(id: String!): UserProperty
  propertyString(id: String!, lang: String): String
}

type UserQuery {
  list(limit: Int, offset: Int): [User!]!
  count(limit: Int, offset: Int): Int!
  item(id: Int!): User
  myself: User
}

type UserMutation {
  """Adding new user"""
  add(item: UserInput!): User!

  """Deletion existent user"""
  delete(id: [Int!]!): [Int!]!

  """Updating existent user"""
  update(item: UserInput!): User!

  """Updating flag of user"""
  updateFlag(id: Int!, flag: String!): User!
}

input UserInput {
  id: Int
  login: String!
  group: [Int!]!
  contact: [UserUserContactInput!]!
  property: [UserPropertyInput!]!
  flag: [String!]!
}

input UserUserContactInput {
  contact: String!
  value: String!
}

input UserPropertyInput {
  property: String!
  string: String!
  lang: String
}

type AuthMutation {
  authByLogin(login: String!, password: String!): User
  registerByLogin(login: String!, password: String!): User
  authByContact(contact: String!, value: String!, password: String!): User
  logout: Boolean!
}

type UserContactQuery {
  list(limit: Int, offset: Int): [UserContact!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): UserContact
}

type UserContactMutation {
  """Adding new user contact"""
  add(item: UserContactInput!): UserContact!

  """Deletion existent user contact"""
  delete(id: [String!]!): [String!]!

  """Updating existent user contact"""
  update(item: UserContactInput!): UserContact!

  """Updating flag of user contact"""
  updateFlag(id: String!, flag: String!): UserContact!
}

input UserContactInput {
  id: String
  type: UserContactType!
  property: [UserContactPropertyInput!]!
  flag: [String!]!
}

input UserContactPropertyInput {
  property: String!
  string: String!
  lang: String
}

type UserGroupQuery {
  list(limit: Int, offset: Int): [UserGroup!]!
  item(id: Int!): UserGroup
  count(limit: Int, offset: Int): Int!
}

type UserGroupMutation {
  """Adding new user group"""
  add(item: UserGroupInput!): UserGroup!
  delete(id: [String!]!): UserGroup!
  update(item: UserGroupInput!): UserGroup!
}

input UserGroupInput {
  id: Float
  parent: Int
  property: [UserGroupPropertyInput!]!
  flag: [String!]!
}

input UserGroupPropertyInput {
  property: String!
  string: String!
  lang: String
}

type LangFlag {
  id: Int!
  flag: Flag!
}

type Lang {
  id: String!
  created_at: String!
  updated_at: String!
  version: Int!
  propertyList: [LangProperty!]!
  propertyItem(id: String!): LangProperty
  propertyString(id: String!): String
  flagList: [LangFlag!]!
  flagString: [String!]!
}

type UserString implements UserProperty {
  id: Int!
  string: String!
  property: Property!
  lang: Lang
}

type DirectoryString implements DirectoryProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

interface DirectoryProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
}

type Value {
  id: String!
  created_at: String!
  updated_at: String!
  version: Int!
  directory: Directory!
  propertyList: [ValueProperty!]!
  propertyItem(id: String!): ValueProperty!
  propertyString(id: String!): String!
}

type Directory {
  id: String!
  created_at: String!
  updated_at: String!
  version: Int!
  property: [DirectoryString!]
  value: [Value!]
  flagList: [LangFlag!]!
  flagString: [String!]!
}

type UserValue implements UserProperty {
  id: Int!
  string: String!
  property: Property!
  directory: Directory!
  value: Value!
}

type UserUser implements UserProperty {
  id: Int!
  string: String!
  property: Property!
  user: User!
}

type UserContactString implements UserContactProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type UserGroupString implements UserGroupProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type UserDescription implements UserProperty {
  id: Int!
  string: String!
  property: Property!
  description: String!
  lang: Lang
}

type Element {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  block: Block!
  propertyList: [ContentProperty!]!
  propertyItem(id: String!): ContentProperty
  propertyString(id: String!): String
  flagList: [Flag!]!
  flagString: [String!]!
}

type Section {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  block: Block!
  parent: Section
  propertyList: [SectionProperty!]!
  propertyItem(id: String!): SectionProperty
  propertyString(id: String!): String
  flagList: [Flag!]!
  flagString: [String!]!
}

type Block implements Content {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  propertyList: [ContentProperty!]!
  propertyItem(id: String!): ContentProperty
  propertyString(id: String!): String
  flagList: [Flag!]!
  flagString: [String!]!
  element: [Element!]!
  section: [Section!]!
}

interface Content {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  propertyList: [ContentProperty!]!
  propertyItem(id: String!): ContentProperty
  propertyString(id: String!): String
  flagList: [Flag!]!
  flagString: [String!]!
}

type ElementQuery {
  list(limit: Int, offset: Int, filter: [ElementFilter!]): [Element!]!
  count(limit: Int, offset: Int, filter: [ElementFilter!]): Int!
  item(id: Int!): Element
}

input ElementFilter {
  field: String!
  operation: String
  value: String!
}

type SectionQuery {
  list(limit: Int, offset: Int): [Section!]!
  count(limit: Int, offset: Int): Int!
  item(id: Int!): Section
}

type BlockQuery {
  list(limit: Int, offset: Int): [Block!]!
  count(limit: Int, offset: Int): Int!
  item(id: Int!): Block
}

type BlockMutation {
  """Adding new content block"""
  add(item: BlockInput!): Block!

  """Deletion existent content block"""
  delete(id: [Int!]!): [Int!]!

  """Updating existent content block"""
  update(item: BlockInput!): Block!
}

input BlockInput {
  id: Float
  property: [BlockPropertyInput!]!
  flag: [String!]!
}

input BlockPropertyInput {
  property: String!
  string: String!
  lang: String
}

type ElementMutation {
  """Adding new content element"""
  add(item: ElementInput!): Element!

  """Deletion existent content element"""
  delete(id: [Int!]!): [Int!]!

  """Updating existent content element"""
  update(item: ElementInput!): Element!
}

input ElementInput {
  id: Float
  block: Float!
  property: [ElementInputProperty!]!
  flag: [String!]!
}

input ElementInputProperty {
  property: String!
  string: String!
  lang: String
}

type SectionMutation {
  """Adding new content section"""
  add(item: SectionInput!): Section!

  """Deletion existent content section"""
  delete(id: [Int!]!): [Int!]!

  """Updating existent content section"""
  update(item: SectionInput!): Section!
}

input SectionInput {
  id: Float
  block: Float!
  parent: Float
  property: [SectionInputProperty!]!
  flag: [String!]!
}

input SectionInputProperty {
  property: String!
  string: String!
  lang: String
}

type BlockString implements BlockProperty & ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type ElementString implements ElementProperty & ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type SectionString implements SectionProperty & ContentProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type PropertyQuery {
  list(limit: Int, offset: Int): [Property!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): Property
}

type PropertyMutation {
  """Adding new property"""
  add(item: PropertyInput!): Property!

  """Deletion existent property"""
  delete(id: [String!]!): [String!]!

  """Updating existent property"""
  update(item: PropertyInput!): Property!
}

input PropertyInput {
  id: String!
  property: [PropertyPropertyInput!]
}

input PropertyPropertyInput {
  property: String!
  value: String!
}

type ChangeLog {
  id: Int!
  created_at: DateTime!
  entity: String!
  entityId: String!
  field: String!
  value: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ChangeLogQuery {
  list(limit: Int, offset: Int): [ChangeLog!]!
  count(limit: Int, offset: Int): Int!
  item: ChangeLog
}

type FetchLog {
  id: Float!
  entity: String!
  entityId: String!
  operation: String!
  arguments: String!
  user: User!
}

type FetchLogQuery {
  list(limit: Int, offset: Int): [FetchLog!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): FetchLog
}

type DirectoryQuery {
  list(limit: Int, offset: Int): [Directory!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): Directory
}

""""""
type DirectoryMutation {
  """Adding new directory"""
  add(item: DirectoryInput!): Directory!

  """Deletion existent directory"""
  delete(id: [String!]!): [String!]!

  """Updating existent directory"""
  update(item: DirectoryInput!): Directory!
}

input DirectoryInput {
  id: String!
  property: [DirectoryPropertyInput!]!
  value: [String!]!
  flag: [String!]!
}

input DirectoryPropertyInput {
  property: String!
  string: String!
  lang: String!
}

type ValueQuery {
  list(limit: Int, offset: Int): [Value!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): Value
}

""""""
type ValueMutation {
  """Adding new value"""
  add(item: ValueInput!): Value!

  """Deletion existent value"""
  delete(id: [String!]!): [String!]!

  """Updating existent value"""
  update(item: ValueInput!): Value!
}

input ValueInput {
  id: String!
  directory: String!
  property: [ValuePropertyInput!]
}

input ValuePropertyInput {
  property: String!
  value: String!
}

type ValueString implements ValueProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type FlagQuery {
  list(limit: Int, offset: Int): [Flag!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): Flag
}

type FlagMutation {
  """Adding new flag"""
  add(item: FlagInput!): Flag!

  """Deletion existent flag"""
  delete(id: [String!]!): [String!]!

  """Updating existent flag"""
  update(item: FlagInput!): Flag!
}

input FlagInput {
  id: String!
  property: [FlagPropertyInput!]!
  flag: [String!]!
}

input FlagPropertyInput {
  property: String!
  string: String!
  lang: String
}

type FlagString implements FlagProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type LangQuery {
  list(limit: Int, offset: Int): [Lang!]!
  count(limit: Int, offset: Int): Int!
  item(id: String!): Lang
}

type LangMutation {
  """Adding new lang"""
  add(item: LangInput!): Lang!

  """Deletion existent lang"""
  delete(id: [String!]!): [String!]!

  """Updating existent lang"""
  update(item: LangInput!): Lang!
}

input LangInput {
  id: String!
  property: [LangPropertyInput!]
  flag: [String!]
}

input LangPropertyInput {
  property: String!
  string: String!
  lang: String
}

type LangString implements LangProperty {
  id: Int!
  created_at: String!
  updated_at: String!
  version: Int!
  string: String!
  property: Property!
  lang: Lang
}

type Query {
  user: UserQuery!
  userGroup: UserGroupQuery!
  userContact: UserContactQuery!
  element: ElementQuery!
  section: SectionQuery!
  block: BlockQuery!
  property: PropertyQuery!
  changeLog: ChangeLogQuery!
  fetchLog: FetchLogQuery!
  directory: DirectoryQuery!
  value: ValueQuery!
  flag: FlagQuery!
  lang: LangQuery!
}

type Mutation {
  user: UserMutation!
  auth: AuthMutation
  userGroup: UserGroupMutation!
  userContact: UserContactMutation!
  element: ElementMutation!
  section: SectionMutation!
  block: BlockMutation!
  property: PropertyMutation!
  directory: DirectoryMutation!
  value: ValueMutation!
  flag: FlagMutation!
  lang: LangMutation!
}